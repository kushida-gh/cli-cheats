# If using in a script, you may need to run:
# Set-ExecutionPolicy -ExecutionPolicy Unrestricted



$hostnamenew = Read-Host -Prompt 'Enter  new hostname: '
$net-ip-static = Read-Host -Prompt 'Enter IP address: '
$net-ip-gateway = Read-Host -Prompt 'Enter default gateway: '


# Change hostname
# -----------------------------------------------------------
Rename-Computer -NewName [new name] -LocalCredential env:computername\Administrator -PassThru


# Set static IP on interface alias "Wired Ethernet Connection"
# -----------------------------------------------------------
New-NetIPAddress –InterfaceAlias "Wired Ethernet Connection" –IPv4Address $net-ip-static –PrefixLength 24 -DefaultGateway $net-ip-gateway
Set-DnsClientServerAddress -InterfaceAlias "Wired Ethernet Connection" -ServerAddresses 172.31.0.51
Set-DnsClientGlobalSetting -SuffixSearchList @("foobar.com")


# Disable NetBIOS over TCP/IP
# -----------------------------------------------------------
$net-adapters=(gwmi Win32_NetworkAdapterConfiguration )
Foreach ($net-adapter in $net-adapters){
  Write-Host $net-adapter
  $net-adapter.SetTcpipNetbios(2)
}


# Adapter Bindings
# -----------------------------------------------------------
# Disable QoS Packet Scheduler
Disable-NetAdapterBinding -Name "*" -ComponentID ms_pacer

# Disable File and Printer Sharing for Microsoft Networks
Disable-NetAdapterBinding -Name "*" -ComponentID ms_server

# Disable Internet Protocol Version (TCP/IPv6)
Disable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip6

# Disable Link-Layer Topology Discovery Mapper I/O Driver
Disable-NetAdapterBinding -Name "*" -ComponentID ms_lltdio

# Disable Link-Layer Topology Discovery Responder
Disable-NetAdapterBinding -Name "*" -ComponentID ms_rspndr

# Disable Microsoft LLDP Protocol Driver
Disable-NetAdapterBinding -Name "*" -ComponentID ms_lldp



# Disable Teredo
# -----------------------------------------------------------
netsh interface teredo set state disabled



# Disable SSDP
# -----------------------------------------------------------
# This doesn't seem to work on Windows 10
# Disable-NetLldpAgent -NetAdapterName "*"
Stop-Service "SSDPSRV" -Force
Set-Service "SSDPSRV" -StartupType Disabled



# Disable Connected User Experiences and Telemetry service
# -----------------------------------------------------------
Stop-Service "DiagTrack" -Force
Set-Service "DiagTrack" -StartupType Disabled



# Disable Microsoft Account Sign-in Assistant service
# -----------------------------------------------------------
Stop-Service "wlidsvc" -Force
Set-Service "wlidsvc" -StartupType Disabled



# Disable Secure Socket Tunneling Protocol Service service
# -----------------------------------------------------------
Stop-Service "SstpSvc" -Force
Set-Service "SstpSvc" -StartupType Disabled



# Disable Remote Assistance
# -----------------------------------------------------------
reg add "HKLM\SYSTEM\CurrentControlSet\Control\Remote Assistance" /v fAllowToGetHelp /t REG_DWORD /d 0 /f



# Disable Cortana
# -----------------------------------------------------------
reg add "HKLM\Software\Policies\Microsoft\Windows\Windows Search" /v AllowCortana /t REG_DWORD /d 0 /f



# Remove gaming/Xbox stuff (https://gist.github.com/joshschmelzle/04c57d957c5bb92e85ae9180021b26dc)
# -----------------------------------------------------------
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "xbox" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
reg add "HKLM\SOFTWARE\Microsoft\PolicyManager\default\ApplicationManagement\AllowGameDVR" /v value /t REG_DWORD /d 0 /f
reg add "HKLM\SOFTWARE\Microsoft\PolicyManager\current\device\ApplicationManagement" /v AllowGameDVR /t REG_DWORD /d 0 /f
reg add "HKCU\System\GameConfigStore" /v GameDVR_Enabled /t REG_DWORD /d 0 /f
reg add "HKCU\Software\Microsoft\GameBar" /v AllowAutoGameMode /t REG_DWORD /d 0 /f
reg add "HKCU\Software\Microsoft\GameBar" /v AutoGameModeEnabled /t REG_DWORD /d 0 /f



# Remove Zune stuff
# -----------------------------------------------------------
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "zune" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }



# Remove other crap
# -----------------------------------------------------------
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "oneconnect" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "people" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "wallet" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "bingweather" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "solitaire" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "windowsmaps" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "onenote" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "mixedreality" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "messaging" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "print3d" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "store" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "feedback" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }

Remove-AppxPackage Microsoft.Advertising
Remove-AppxPackage Microsoft.BingWeather
Remove-AppxPackage Microsoft.Messaging
Remove-AppxPackage Microsoft.Microsoft3DViewer
Remove-AppxPackage Microsoft.MicrosoftEdge
Remove-AppxPackage Microsoft.MicrosoftEdge_44.17763.1.0_neutral__8wekyb3d8bbwe
Remove-AppxPackage Microsoft.MicrosoftSolitaireCollection
Remove-AppxPackage Microsoft.MixedReality.Portal
Remove-AppxPackage Microsoft.Office.OneNote
Remove-AppxPackage Microsoft.OneConnect
Remove-AppxPackage Microsoft.People
Remove-AppxPackage Microsoft.Print3D
Remove-AppxPackage Microsoft.Services.Store.Engagement
Remove-AppxPackage Microsoft.StorePurchaseApp
Remove-AppxPackage Microsoft.Wallet
Remove-AppxPackage Microsoft.WindowsCamera
Remove-AppxPackage Microsoft.Windows.Cortana_1.11.5.17763_neutral_neutral_cw5n1h2txyewy
Remove-AppxPackage Microsoft.WindowsFeedbackHub
Remove-AppxPackage Microsoft.WindowsMaps
Remove-AppxPackage Microsoft.WindowsStore
Remove-AppxPackage Microsoft.XboxApp
Remove-AppxPackage Microsoft.XboxGameCallableUI
Remove-AppxPackage Microsoft.XboxGameOverlay
Remove-AppxPackage Microsoft.XboxIdentityProvider
Remove-AppxPackage Microsoft.XboxSpeechToTextOverlay
Remove-AppxPackage Microsoft.Xbox.TCUI
Remove-AppxPackage Microsoft.ZuneMusic
Remove-AppxPackage Microsoft.ZuneVideo

Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "Microsoft.BingWeather" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "Microsoft.Messaging" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "Microsoft.Microsoft3DViewer" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "Microsoft.MicrosoftSolitaireCollection" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "Microsoft.MixedReality.Portal" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "Microsoft.Office.OneNote" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "Microsoft.OneConnect" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "Microsoft.People" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "Microsoft.Print3D" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "Microsoft.StorePurchaseApp" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "Microsoft.Wallet" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "Microsoft.WindowsCamera" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "Microsoft.WindowsFeedbackHub" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "Microsoft.WindowsMaps" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "Microsoft.WindowsStore" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "Microsoft.XboxApp" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "Microsoft.XboxGameOverlay" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "Microsoft.XboxIdentityProvider" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "Microsoft.XboxSpeechToTextOverlay" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "Microsoft.Xbox.TCUI" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "Microsoft.ZuneMusic" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "Microsoft.ZuneVideo" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }

Remove-AppxPackage Microsoft.WindowsStore_11805.1001.49.0_x64__8wekyb3d8bbwe
Remove-AppxPackage Microsoft.XboxIdentityProvider_12.44.20001.0_x64__8wekyb3d8bbwe
Remove-AppxPackage Microsoft.WindowsCamera_2018.425.120.0_x64__8wekyb3d8bbwe
Remove-AppxPackage Microsoft.StorePurchaseApp_11805.1001.8.0_x64__8wekyb3d8bbwe
Remove-AppxPackage Microsoft.ZuneVideo_10.18052.20211.0_x64__8wekyb3d8bbwe
Remove-AppxPackage Microsoft.ZuneMusic_10.18052.20211.0_x64__8wekyb3d8bbwe
Remove-AppxPackage Microsoft.XboxSpeechToTextOverlay_1.17.29001.0_x64__8wekyb3d8bbwe
Remove-AppxPackage Microsoft.XboxGamingOverlay_2.20.22001.0_x64__8wekyb3d8bbwe
Remove-AppxPackage Microsoft.XboxGameOverlay_1.32.17005.0_x64__8wekyb3d8bbwe
Remove-AppxPackage Microsoft.XboxApp_41.41.18001.0_x64__8wekyb3d8bbwe
Remove-AppxPackage Microsoft.Xbox.TCUI_1.11.28003.0_x64__8wekyb3d8bbwe
Remove-AppxPackage Microsoft.WindowsMaps_5.1805.1431.0_x64__8wekyb3d8bbwe
Remove-AppxPackage Microsoft.WindowsFeedbackHub_1.1805.2331.0_x64__8wekyb3d8bbwe
Remove-AppxPackage Microsoft.Wallet_2.2.18179.0_x64__8wekyb3d8bbwe
Remove-AppxPackage Microsoft.Print3D_3.0.1521.0_x64__8wekyb3d8bbwe
Remove-AppxPackage Microsoft.OneConnect_5.1807.1991.0_x64__8wekyb3d8bbwe
Remove-AppxPackage Microsoft.Office.OneNote_16001.10228.20003.0_x64__8wekyb3d8bbwe
Remove-AppxPackage Microsoft.MixedReality.Portal_2000.18081.1242.0_x64__8wekyb3d8bbwe
Remove-AppxPackage Microsoft.MicrosoftSolitaireCollection_4.1.5252.0_x86__8wekyb3d8bbwe
Remove-AppxPackage Microsoft.Microsoft3DViewer_4.1808.15012.0_x64__8wekyb3d8bbwe
Remove-AppxPackage Microsoft.Messaging_3.43.27001.0_x64__8wekyb3d8bbwe
Remove-AppxPackage Microsoft.MicrosoftOfficeHub_17.8918.5926.0_x64__8wekyb3d8bbwe
Remove-AppxPackage Microsoft.SkypeApp_14.26.95.0_x64__kzf8qxf38zg5c
Remove-AppxPackage Microsoft.People_10.1805.1361.0_x64__8wekyb3d8bbwe

Get-AppxPackage *Microsoft.YourPhone* -AllUsers | Remove-AppxPackage


# Remove OneDrive
taskkill.exe /f /im OneDrive.exe
C:\Windows\SysWOW64\OneDriveSetup.exe /uninstall



# Remove PeopleExperienceHost
Get-Process | Where-Object { $_.Name -match "PeopleExperienceHost.exe" } | Stop-Process -Force
reg add "HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\People" /v PeopleBand /t REG_DWORD /d 0 /f
reg add "HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\People\ShoulderTap" /v ShoulderTap /t REG_DWORD /d 0 /f
reg add "HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\People\ShoulderTap" /v ShoulderTapAudio /t REG_DWORD /d 0 /f 



# Remove Mail/Calendar
Get-AppxPackage Microsoft.windowscommunicationsapps | Remove-AppxPackage



# Remove Microsoft Edge desktop shortcut
Remove-Item "$env:homepath\Desktop\\Microsoft Edge.lnk"



# https://docs.microsoft.com/en-us/windows/privacy/manage-windows-1809-endpoints
# Ref: https://docs.microsoft.com/en-us/windows/privacy/manage-connections-from-windows-operating-system-components-to-microsoft-services#bkmk-priv-feedback

# Feedback & diagnostics
reg add "HKLM\Software\Policies\Microsoft\Windows\DataCollection" /v DoNotShowFeedbackNotifications /t REG_DWORD /d 1 /f
reg add "HKLM\Software\Policies\Microsoft\Windows\DataCollection" /v AllowTelemetry /t REG_DWORD /d 0 /f
reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows\CloudContent" /v DisableWindowsConsumerFeatures /t REG_DWORD /d 1 /f
reg add "HKCU\SOFTWARE\Policies\Microsoft\Windows\CloudContent" /v DisableTailoredExperiencesWithDiagnosticData /t REG_DWORD /d 1 /f

# Motion
reg add "HKLM\Software\Policies\Microsoft\Windows\AppPrivacy" /v LetAppsAccessMotion /t REG_DWORD /d 2 /f

# Tasks
reg add "HKLM\Software\Policies\Microsoft\Windows\AppPrivacy" /v LetAppsAccessTasks /t REG_DWORD /d 2 /f

# App Diagnostics
reg add "HKLM\Software\Policies\Microsoft\Windows\AppPrivacy" /v LetAppsGetDiagnosticInfo /t REG_DWORD /d 2 /f

# Inking & Typing
reg add "HKLM\Software\Policies\Microsoft\InputPersonalization" /v RestrictImplicitTextCollection /t REG_DWORD /d 1 /f

# Activity History
reg add "HKLM\Software\Policies\Microsoft\Windows\System" /v EnableActivityFeed /t REG_DWORD /d 1 /f
reg add "HKLM\Software\Policies\Microsoft\Windows\System" /v PublishUserActivities /t REG_DWORD /d 2 /f
reg add "HKLM\Software\Policies\Microsoft\Windows\System" /v UploadUserActivities /t REG_DWORD /d 2 /f

# Voice Activation
reg add "HKLM\Software\Policies\Microsoft\Windows\AppPrivacy" /v LetAppsActivateWithVoice /t REG_DWORD /d 2 /f
reg add "HKLM\Software\Policies\Microsoft\Windows\AppPrivacy" /v LetAppsActivateWithVoiceAboveLock /t REG_DWORD /d 2 /f

# Sync your settings
reg add "HKLM\Software\Policies\Microsoft\Windows\SettingSync" /v DisableSettingSync /t REG_DWORD /d 2 /f
reg add "HKLM\Software\Policies\Microsoft\Windows\SettingSync" /v DisableSettingSyncUserOverride /t REG_DWORD /d 1 /f
reg add "HKCU\SOFTWARE\Microsoft\Messaging" /v CloudServiceSyncEnabled /t REG_DWORD /d 0 /f

# Teredo
reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows\TCPIP\v6Transition" /v Teredo_State /t REG_SZ /d Disabled

# Windows Spotlight (re-check - there may be a step missing)
reg add "HKCU\SOFTWARE\Policies\Microsoft\Windows\CloudContent" /v DisableWindowsSpotlightFeatures /t REG_DWORD /d 1 /f
reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows\Personalization" /v NoLockScreen /t REG_DWORD /d 1 /f
reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows\CloudContent" /v DisableSoftLanding /t REG_DWORD /d 1 /f
reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows\CloudContent" /v DisableWindowsConsumerFeatures /t REG_DWORD /d 1 /f

# Microsoft Store
reg add "HKLM\SOFTWARE\Policies\Microsoft\WindowsStore" /v DisableStoreApps /t REG_DWORD /d 1 /f
reg add "HKLM\SOFTWARE\Policies\Microsoft\WindowsStore" /v AutoDownload /t REG_DWORD /d 2 /f

# Apps for websites
reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows\System" /v EnableAppUriHandlers /t REG_DWORD /d 0 /f

# Delivery Optimization
reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows\DeliveryOptimization" /v DODownloadMode /t REG_DWORD /d 100 /f





# Server-side stuff
# ----------------------------------------------------------------------------------------------------------------------

# Create Active Directory
# -----------------------------------------------------------
$dns-fqdn = Read-Host -Prompt 'Enter Active Directory DNS namespace (such as foobar.com): '
$netbios-domain = Read-Host -Prompt 'Enter Active Directory NetBIOS name (such as FOOBAR): '

Install-WindowsFeature AD-Domain-Services -IncludeManagementTools

Import-Module ADDSDeployment

Install-ADDSForest -DomainName $dns-fqdn -CreateDnsDelegation:$false -DatabasePath "C:\Windows\NTDS" -DomainMode "7" -DomainNetbiosName "$netbios-domain" -ForestMode "7" -InstallDns:$true -LogPath "C:\Windows\NTDS" -NoRebootOnCompletion:$True -SysvolPath "C:\Windows\SYSVOL" -Force:$true

Write-Host "Reboot the server when ready to initialize your new Active Directory installation."



# Enable Remote Desktop
# -----------------------------------------------------------
Set-ItemProperty -Path ‘HKLM:SYSTEM\CurrentControlSetControl\Terminal Server’ -Name fDenyTSConnections -Value 0

New-NetFirewallRule -RemoteAddress 172.16.0.0/12 -DisplayName "FOOBAR: Allow RDP" -Direction inbound -Profile Any -Action Allow -Protocol TCP -LocalPort 3389
New-NetFirewallRule -RemoteAddress 172.16.0.0/12 -DisplayName "FOOBAR: Allow ping" -Direction inbound -Profile Any -Action Allow -Protocol ICMPv4 -IcmpType 8

