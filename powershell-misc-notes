
$hostnamenew = Read-Host -Prompt 'Enter  new hostname: '
$net-ip-static = Read-Host -Prompt 'Enter IP address: '
$net-ip-gateway = Read-Host -Prompt 'Enter default gateway: '


# Change hostname
# -----------------------------------------------------------
Rename-Computer -NewName [new name] -LocalCredential env:computername\Administrator -PassThru


# Set static IP on interface alias "Wired Ethernet Connection"
# -----------------------------------------------------------
New-NetIPAddress –InterfaceAlias "Wired Ethernet Connection" –IPv4Address $net-ip-static –PrefixLength 24 -DefaultGateway $net-ip-gateway
Set-DnsClientServerAddress -InterfaceAlias "Wired Ethernet Connection" -ServerAddresses 172.31.0.51
Set-DnsClientGlobalSetting -SuffixSearchList @("foobar.com")


# Disable NetBIOS over TCP/IP
# -----------------------------------------------------------
$net-adapters=(gwmi Win32_NetworkAdapterConfiguration )
Foreach ($net-adapter in $net-adapters){
  Write-Host $net-adapter
  $net-adapter.SetTcpipNetbios(2)
}


# Adapter Bindings
# -----------------------------------------------------------
# Disable QoS Packet Scheduler
Disable-NetAdapterBinding -Name "*" -ComponentID ms_pacer

# Disable File and Printer Sharing for Microsoft Networks
Disable-NetAdapterBinding -Name "*" -ComponentID ms_server

# Disable Internet Protocol Version (TCP/IPv6)
Disable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip6

# Disable Link-Layer Topology Discovery Mapper I/O Driver
Disable-NetAdapterBinding -Name "*" -ComponentID ms_lltdio

# Disable Link-Layer Topology Discovery Responder
Disable-NetAdapterBinding -Name "*" -ComponentID ms_rspndr

# Disable Microsoft LLDP Protocol Driver
Disable-NetAdapterBinding -Name "*" -ComponentID ms_lldp



# Disable Teredo
# -----------------------------------------------------------
netsh interface teredo set state disabled



# Disable SSDP
# -----------------------------------------------------------
# This doesn't seem to work on Windows 10
# Disable-NetLldpAgent -NetAdapterName "*"
Stop-Service "SSDPSRV" -Force
Set-Service "SSDPSRV" -StartupType Disabled



# Disable Remote Assistance
# -----------------------------------------------------------
reg add "HKLM\SYSTEM\CurrentControlSet\Control\Remote Assistance" /v fAllowToGetHelp /t REG_DWORD /d 0 /f



# Disable Cortana
# -----------------------------------------------------------
reg add "HKLM\Software\Policies\Microsoft\Windows\Windows Search" /v AllowCortana /t REG_DWORD /d 0 /f



# Remove Xbox stuff (https://gist.github.com/joshschmelzle/04c57d957c5bb92e85ae9180021b26dc)
# -----------------------------------------------------------
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "xbox" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }

# Remove Zune stuff
# -----------------------------------------------------------
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "zune" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }

# Remove other crap
# -----------------------------------------------------------
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "oneconnect" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "people" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "wallet" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "bingweather" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "solitaire" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "windowsmaps" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "onenote" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "mixedreality" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "messaging" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "print3d" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "store" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }
Get-ProvisionedAppxPackage -Online | Where-Object { $_.PackageName -match "feedback" } | ForEach-Object { Remove-ProvisionedAppxPackage -Online -PackageName $_.PackageName }

Remove-AppxPackage Microsoft.BingWeather
Remove-AppxPackage Microsoft.Microsoft3DViewer
Remove-AppxPackage Microsoft.MicrosoftSolitaireCollection
Remove-AppxPackage Microsoft.MixedReality.Portal
Remove-AppxPackage Microsoft.Office.OneNote
Remove-AppxPackage Microsoft.OneConnect
Remove-AppxPackage Microsoft.People
Remove-AppxPackage Microsoft.Services.Store.Engagement
Remove-AppxPackage Microsoft.Print3D
Remove-AppxPackage Microsoft.Wallet
Remove-AppxPackage Microsoft.WindowsFeedbackHub
Remove-AppxPackage Microsoft.WindowsMaps
Remove-AppxPackage Microsoft.Xbox.TCUI
Remove-AppxPackage Microsoft.XboxApp
Remove-AppxPackage Microsoft.XboxGameOverlay
Remove-AppxPackage Microsoft.XboxSpeechToTextOverlay
Remove-AppxPackage Microsoft.XboxGameCallableUI
Remove-AppxPackage Microsoft.XboxIdentityProvider
Remove-AppxPackage Microsoft.ZuneMusic
Remove-AppxPackage Microsoft.ZuneVideo
Remove-AppxPackage Microsoft.StorePurchaseApp
Remove-AppxPackage Microsoft.WindowsStore
Remove-AppxPackage Microsoft.Advertising
Remove-AppxPackage Microsoft.WindowsCamera
Remove-AppxPackage Microsoft.MicrosoftEdge
Remove-AppxPackage Microsoft.MicrosoftEdge_44.17763.1.0_neutral__8wekyb3d8bbwe
Remove-AppxPackage Microsoft.Windows.Cortana_1.11.5.17763_neutral_neutral_cw5n1h2txyewy


# Create Active Directory
# -----------------------------------------------------------
$dns-fqdn = Read-Host -Prompt 'Enter Active Directory DNS namespace (such as foobar.com): '
$netbios-domain = Read-Host -Prompt 'Enter Active Directory NetBIOS name (such as FOOBAR): '

Install-WindowsFeature AD-Domain-Services -IncludeManagementTools

Import-Module ADDSDeployment

Install-ADDSForest -DomainName $dns-fqdn -CreateDnsDelegation:$false -DatabasePath "C:\Windows\NTDS" -DomainMode "7" -DomainNetbiosName "$netbios-domain" -ForestMode "7" -InstallDns:$true -LogPath "C:\Windows\NTDS" -NoRebootOnCompletion:$True -SysvolPath "C:\Windows\SYSVOL" -Force:$true

Write-Host "Reboot the server when ready to initialize your new Active Directory installation."




# Enable Remote Desktop
# -----------------------------------------------------------
Set-ItemProperty -Path ‘HKLM:SYSTEM\CurrentControlSetControl\Terminal Server’ -Name fDenyTSConnections -Value 0

New-NetFirewallRule -RemoteAddress 172.16.0.0/12 -DisplayName "FOOBAR: Allow RDP" -Direction inbound -Profile Any -Action Allow -Protocol TCP -LocalPort 3389
New-NetFirewallRule -RemoteAddress 172.16.0.0/12 -DisplayName "FOOBAR: Allow ping" -Direction inbound -Profile Any -Action Allow -Protocol ICMPv4 -IcmpType 8

